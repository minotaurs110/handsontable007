/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './handsontable';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_HotTable {
  /*private*/ _eventHandler:Function;
  context:import0.HotTable;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  subscription6:any;
  subscription7:any;
  subscription8:any;
  subscription9:any;
  subscription10:any;
  subscription11:any;
  subscription12:any;
  subscription13:any;
  subscription14:any;
  subscription15:any;
  subscription16:any;
  subscription17:any;
  subscription18:any;
  subscription19:any;
  subscription20:any;
  subscription21:any;
  subscription22:any;
  subscription23:any;
  subscription24:any;
  subscription25:any;
  subscription26:any;
  subscription27:any;
  subscription28:any;
  subscription29:any;
  subscription30:any;
  subscription31:any;
  subscription32:any;
  subscription33:any;
  subscription34:any;
  subscription35:any;
  subscription36:any;
  subscription37:any;
  subscription38:any;
  subscription39:any;
  subscription40:any;
  subscription41:any;
  subscription42:any;
  subscription43:any;
  subscription44:any;
  subscription45:any;
  subscription46:any;
  subscription47:any;
  subscription48:any;
  subscription49:any;
  subscription50:any;
  subscription51:any;
  subscription52:any;
  subscription53:any;
  subscription54:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.HotTable(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
    (this.subscription6 && this.subscription6.unsubscribe());
    (this.subscription7 && this.subscription7.unsubscribe());
    (this.subscription8 && this.subscription8.unsubscribe());
    (this.subscription9 && this.subscription9.unsubscribe());
    (this.subscription10 && this.subscription10.unsubscribe());
    (this.subscription11 && this.subscription11.unsubscribe());
    (this.subscription12 && this.subscription12.unsubscribe());
    (this.subscription13 && this.subscription13.unsubscribe());
    (this.subscription14 && this.subscription14.unsubscribe());
    (this.subscription15 && this.subscription15.unsubscribe());
    (this.subscription16 && this.subscription16.unsubscribe());
    (this.subscription17 && this.subscription17.unsubscribe());
    (this.subscription18 && this.subscription18.unsubscribe());
    (this.subscription19 && this.subscription19.unsubscribe());
    (this.subscription20 && this.subscription20.unsubscribe());
    (this.subscription21 && this.subscription21.unsubscribe());
    (this.subscription22 && this.subscription22.unsubscribe());
    (this.subscription23 && this.subscription23.unsubscribe());
    (this.subscription24 && this.subscription24.unsubscribe());
    (this.subscription25 && this.subscription25.unsubscribe());
    (this.subscription26 && this.subscription26.unsubscribe());
    (this.subscription27 && this.subscription27.unsubscribe());
    (this.subscription28 && this.subscription28.unsubscribe());
    (this.subscription29 && this.subscription29.unsubscribe());
    (this.subscription30 && this.subscription30.unsubscribe());
    (this.subscription31 && this.subscription31.unsubscribe());
    (this.subscription32 && this.subscription32.unsubscribe());
    (this.subscription33 && this.subscription33.unsubscribe());
    (this.subscription34 && this.subscription34.unsubscribe());
    (this.subscription35 && this.subscription35.unsubscribe());
    (this.subscription36 && this.subscription36.unsubscribe());
    (this.subscription37 && this.subscription37.unsubscribe());
    (this.subscription38 && this.subscription38.unsubscribe());
    (this.subscription39 && this.subscription39.unsubscribe());
    (this.subscription40 && this.subscription40.unsubscribe());
    (this.subscription41 && this.subscription41.unsubscribe());
    (this.subscription42 && this.subscription42.unsubscribe());
    (this.subscription43 && this.subscription43.unsubscribe());
    (this.subscription44 && this.subscription44.unsubscribe());
    (this.subscription45 && this.subscription45.unsubscribe());
    (this.subscription46 && this.subscription46.unsubscribe());
    (this.subscription47 && this.subscription47.unsubscribe());
    (this.subscription48 && this.subscription48.unsubscribe());
    (this.subscription49 && this.subscription49.unsubscribe());
    (this.subscription50 && this.subscription50.unsubscribe());
    (this.subscription51 && this.subscription51.unsubscribe());
    (this.subscription52 && this.subscription52.unsubscribe());
    (this.subscription53 && this.subscription53.unsubscribe());
    (this.subscription54 && this.subscription54.unsubscribe());
  }
  check_data(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.data = currValue;
      this._changes['data'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_pagedData$(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.pagedData$ = currValue;
      this._changes['pagedData$'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_colHeaders(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.colHeaders = currValue;
      this._changes['colHeaders'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_columns(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.columns = currValue;
      this._changes['columns'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_colWidths(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.colWidths = currValue;
      this._changes['colWidths'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.options = currValue;
      this._changes['options'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean,emit6:boolean,emit7:boolean,emit8:boolean,emit9:boolean,emit10:boolean,emit11:boolean,emit12:boolean,emit13:boolean,emit14:boolean,emit15:boolean,emit16:boolean,emit17:boolean,emit18:boolean,emit19:boolean,emit20:boolean,emit21:boolean,emit22:boolean,emit23:boolean,emit24:boolean,emit25:boolean,emit26:boolean,emit27:boolean,emit28:boolean,emit29:boolean,emit30:boolean,emit31:boolean,emit32:boolean,emit33:boolean,emit34:boolean,emit35:boolean,emit36:boolean,emit37:boolean,emit38:boolean,emit39:boolean,emit40:boolean,emit41:boolean,emit42:boolean,emit43:boolean,emit44:boolean,emit45:boolean,emit46:boolean,emit47:boolean,emit48:boolean,emit49:boolean,emit50:boolean,emit51:boolean,emit52:boolean,emit53:boolean,emit54:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.afterCellMetaReset.subscribe(_eventHandler.bind(view,'afterCellMetaReset'))); }
    if (emit1) { (this.subscription1 = this.context.afterChange.subscribe(_eventHandler.bind(view,'afterChange'))); }
    if (emit2) { (this.subscription2 = this.context.afterCreateCol.subscribe(_eventHandler.bind(view,'afterCreateCol'))); }
    if (emit3) { (this.subscription3 = this.context.afterCreateRow.subscribe(_eventHandler.bind(view,'afterCreateRow'))); }
    if (emit4) { (this.subscription4 = this.context.afterDeselect.subscribe(_eventHandler.bind(view,'afterDeselect'))); }
    if (emit5) { (this.subscription5 = this.context.afterDestroy.subscribe(_eventHandler.bind(view,'afterDestroy'))); }
    if (emit6) { (this.subscription6 = this.context.afterDocumentKeyDown.subscribe(_eventHandler.bind(view,'afterDocumentKeyDown'))); }
    if (emit7) { (this.subscription7 = this.context.afterGetCellMeta.subscribe(_eventHandler.bind(view,'afterGetCellMeta'))); }
    if (emit8) { (this.subscription8 = this.context.afterGetColHeader.subscribe(_eventHandler.bind(view,'afterGetColHeader'))); }
    if (emit9) { (this.subscription9 = this.context.afterGetRowHeader.subscribe(_eventHandler.bind(view,'afterGetRowHeader'))); }
    if (emit10) { (this.subscription10 = this.context.afterInit.subscribe(_eventHandler.bind(view,'afterInit'))); }
    if (emit11) { (this.subscription11 = this.context.afterIsMultipleSelectionCheck.subscribe(_eventHandler.bind(view,'afterIsMultipleSelectionCheck'))); }
    if (emit12) { (this.subscription12 = this.context.afterLoadData.subscribe(_eventHandler.bind(view,'afterLoadData'))); }
    if (emit13) { (this.subscription13 = this.context.afterMomentumScroll.subscribe(_eventHandler.bind(view,'afterMomentumScroll'))); }
    if (emit14) { (this.subscription14 = this.context.afterOnCellCornerMouseDown.subscribe(_eventHandler.bind(view,'afterOnCellCornerMouseDown'))); }
    if (emit15) { (this.subscription15 = this.context.afterOnCellMouseDown.subscribe(_eventHandler.bind(view,'afterOnCellMouseDown'))); }
    if (emit16) { (this.subscription16 = this.context.afterOnCellMouseOver.subscribe(_eventHandler.bind(view,'afterOnCellMouseOver'))); }
    if (emit17) { (this.subscription17 = this.context.afterRemoveCol.subscribe(_eventHandler.bind(view,'afterRemoveCol'))); }
    if (emit18) { (this.subscription18 = this.context.afterRemoveRow.subscribe(_eventHandler.bind(view,'afterRemoveRow'))); }
    if (emit19) { (this.subscription19 = this.context.afterRender.subscribe(_eventHandler.bind(view,'afterRender'))); }
    if (emit20) { (this.subscription20 = this.context.afterRenderer.subscribe(_eventHandler.bind(view,'afterRenderer'))); }
    if (emit21) { (this.subscription21 = this.context.afterScrollHorizontally.subscribe(_eventHandler.bind(view,'afterScrollHorizontally'))); }
    if (emit22) { (this.subscription22 = this.context.afterScrollVertically.subscribe(_eventHandler.bind(view,'afterScrollVertically'))); }
    if (emit23) { (this.subscription23 = this.context.afterSelection.subscribe(_eventHandler.bind(view,'afterSelection'))); }
    if (emit24) { (this.subscription24 = this.context.afterSelectionByProp.subscribe(_eventHandler.bind(view,'afterSelectionByProp'))); }
    if (emit25) { (this.subscription25 = this.context.afterSelectionEnd.subscribe(_eventHandler.bind(view,'afterSelectionEnd'))); }
    if (emit26) { (this.subscription26 = this.context.afterSelectionEndByProp.subscribe(_eventHandler.bind(view,'afterSelectionEndByProp'))); }
    if (emit27) { (this.subscription27 = this.context.afterSetCellMeta.subscribe(_eventHandler.bind(view,'afterSetCellMeta'))); }
    if (emit28) { (this.subscription28 = this.context.afterUpdateSettings.subscribe(_eventHandler.bind(view,'afterUpdateSettings'))); }
    if (emit29) { (this.subscription29 = this.context.afterValidate.subscribe(_eventHandler.bind(view,'afterValidate'))); }
    if (emit30) { (this.subscription30 = this.context.beforeAutofill.subscribe(_eventHandler.bind(view,'beforeAutofill'))); }
    if (emit31) { (this.subscription31 = this.context.beforeCellAlignment.subscribe(_eventHandler.bind(view,'beforeCellAlignment'))); }
    if (emit32) { (this.subscription32 = this.context.beforeChange.subscribe(_eventHandler.bind(view,'beforeChange'))); }
    if (emit33) { (this.subscription33 = this.context.beforeChangeRender.subscribe(_eventHandler.bind(view,'beforeChangeRender'))); }
    if (emit34) { (this.subscription34 = this.context.beforeDrawBorders.subscribe(_eventHandler.bind(view,'beforeDrawBorders'))); }
    if (emit35) { (this.subscription35 = this.context.beforeGetCellMeta.subscribe(_eventHandler.bind(view,'beforeGetCellMeta'))); }
    if (emit36) { (this.subscription36 = this.context.beforeInit.subscribe(_eventHandler.bind(view,'beforeInit'))); }
    if (emit37) { (this.subscription37 = this.context.beforeInitWalkontable.subscribe(_eventHandler.bind(view,'beforeInitWalkontable'))); }
    if (emit38) { (this.subscription38 = this.context.beforeKeyDown.subscribe(_eventHandler.bind(view,'beforeKeyDown'))); }
    if (emit39) { (this.subscription39 = this.context.beforeOnCellMouseDown.subscribe(_eventHandler.bind(view,'beforeOnCellMouseDown'))); }
    if (emit40) { (this.subscription40 = this.context.beforeRemoveCol.subscribe(_eventHandler.bind(view,'beforeRemoveCol'))); }
    if (emit41) { (this.subscription41 = this.context.beforeRemoveRow.subscribe(_eventHandler.bind(view,'beforeRemoveRow'))); }
    if (emit42) { (this.subscription42 = this.context.beforeRender.subscribe(_eventHandler.bind(view,'beforeRender'))); }
    if (emit43) { (this.subscription43 = this.context.beforeSetRangeEnd.subscribe(_eventHandler.bind(view,'beforeSetRangeEnd'))); }
    if (emit44) { (this.subscription44 = this.context.beforeTouchScroll.subscribe(_eventHandler.bind(view,'beforeTouchScroll'))); }
    if (emit45) { (this.subscription45 = this.context.beforeValidate.subscribe(_eventHandler.bind(view,'beforeValidate'))); }
    if (emit46) { (this.subscription46 = this.context.construct.subscribe(_eventHandler.bind(view,'construct'))); }
    if (emit47) { (this.subscription47 = this.context.init.subscribe(_eventHandler.bind(view,'init'))); }
    if (emit48) { (this.subscription48 = this.context.modifyCol.subscribe(_eventHandler.bind(view,'modifyCol'))); }
    if (emit49) { (this.subscription49 = this.context.modifyColWidth.subscribe(_eventHandler.bind(view,'modifyColWidth'))); }
    if (emit50) { (this.subscription50 = this.context.modifyRow.subscribe(_eventHandler.bind(view,'modifyRow'))); }
    if (emit51) { (this.subscription51 = this.context.modifyRowHeight.subscribe(_eventHandler.bind(view,'modifyRowHeight'))); }
    if (emit52) { (this.subscription52 = this.context.persistentStateLoad.subscribe(_eventHandler.bind(view,'persistentStateLoad'))); }
    if (emit53) { (this.subscription53 = this.context.persistentStateReset.subscribe(_eventHandler.bind(view,'persistentStateReset'))); }
    if (emit54) { (this.subscription54 = this.context.persistentStateSave.subscribe(_eventHandler.bind(view,'persistentStateSave'))); }
  }
}